    let Endofunctor = ./../../../Functor/Endo/Type Type ./../../../Function/Type

in  let EitherT = ./../../Type

in  let Either = ./../../../Either/Type

in  let eitherF =
          ./../../../Either/functor/endo/star
          (./../../../Identity/Type Type)
          ./../../../Identity/applicative

in  let composeF =
          ./../../../Compose/functor
          Type
          ./../../../Function/Type
          Type
          ./../../../Function/Type
          Type
          ./../../../Function/Type

in    λ(a : Type)
    → λ(f : Type → Type)
    → λ(functor : Endofunctor f)
    →   composeF f functor (λ(b : Type) → Either { _1 = a, _2 = b }) (eitherF a)
      : Endofunctor (EitherT a f)
