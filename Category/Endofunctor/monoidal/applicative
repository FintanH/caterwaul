{- This cheats a bit on the identity, since `dObject` is Type, we don‚Äôt need a
   functor **Set** ‚Üí ùíü.
-}
    let kArrow = ./../../../Function/Kind

in  let kProduct = ./../../../Tuple/Kind

in    Œª(cObject : Kind)
    ‚Üí     let dObject = Type
      
      in    Œª(c : ./../../Monoidal/Kind kArrow kProduct cObject)
          ‚Üí Œª(d : ./../../Monoidal/Kind kArrow kProduct dObject)
          ‚Üí   { arrow =
                  ./../../../NaturalTransformation/Type cObject dObject d.arrow
              , identity =
                  Œª(x : cObject) ‚Üí c.arrow { _1 = c.identity, _2 = x }
              , op =
                  ./../../../Day/Type cObject c d
              }
            : ./../../Monoidal/Kind kArrow kProduct (kArrow cObject dObject)
