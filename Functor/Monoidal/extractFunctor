    let kArrow = ./../../Function/Kind

in  let kProduct = ./../../Tuple/Kind

in  let MonoidalCategory = ./../../Category/Monoidal/Kind kArrow kProduct

in    λ(cObject : Kind)
    → λ(c : MonoidalCategory cObject)
    →     let dObject = Type
      
      in    λ(d : MonoidalCategory dObject)
          → λ(f : kArrow cObject dObject)
          → λ(monoidal : ./Type cObject c d f)
          →   monoidal.{ map }
            : ./../../Functor/Type cObject dObject c.arrow d.arrow f
