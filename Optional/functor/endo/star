    let kArrow = ./../../../Function/Kind

in  let object = Type

in  let cat = ./../../../Category/Set/monoidal/cartesian

in    λ(m : kArrow object object)
    → λ(applicative : ./../../../Applicative/Type object cat cat m)
    →   { map =
              λ(a : object)
            → λ(b : object)
            → λ(f : cat.arrow { _1 = a, _2 = m b })
            → λ(fa : Optional a)
            → Optional/fold
              a
              fa
              (m (Optional b))
              (   λ(x : a)
                → (./../../../Applicative/impliedEndofunctor m applicative).map
                  b
                  (Optional b)
                  (λ(y : b) → Some y)
                  (f x)
              )
              (applicative.identity (Optional b) (λ(_ : cat.identity) → None b))
        }
      : ./../../../Functor/Endo/Star/Type object cat.arrow m Optional
