    let kArrow = ./../Function/Kind

in  let object = Type

in  let arrow = ./../Function/Type

in  let ReaderT = ./Type object arrow

in    λ(r : object)
    → λ(m : kArrow object object)
    → λ(functor : ./../Functor/Endo/Type object arrow m)
    → λ(monad : ./../Monad/Type object arrow m)
    → { identity =
          λ(a : object) → λ(x : a) → λ(_ : r) → monad.identity a x
      , op =
            λ(a : Type)
          → λ(fa : ReaderT m { _1 = r, _2 = ReaderT m { _1 = r, _2 = a } })
          → λ(env : r)
          → monad.op
            a
            ( functor.map
              (ReaderT m { _1 = r, _2 = a })
              (m a)
              (λ(x : ReaderT m { _1 = r, _2 = a }) → x env)
              (fa env)
            )
      }
