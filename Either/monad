    let Either = ./Type

in    λ(a : Type)
    → ./../Monad/fromPureBind
      Type
      ./../Function/Type
      ./../Function/category
      (λ(b : Type) → Either { _1 = a, _2 = b })
      (λ(b : Type) → λ(x : b) → < Right = x | Left : a >)
      (   λ(b : Type)
        → λ(c : Type)
        → λ(k : b → Either { _1 = a, _2 = c })
        → λ(fa : Either { _1 = a, _2 = b })
        →     let map =
                    ( ./functor/endo/star
                      (./../Identity/Type Type)
                      ./../Identity/applicative
                      a
                    ).map
          
          in  merge
              { Left =
                  λ(l : a) → < Left = l | Right : c >
              , Right =
                  λ(e : Either { _1 = a, _2 = c }) → e
              }
              (map b (Either { _1 = a, _2 = c }) k fa)
      )
