    let Either = ./Type

in  let partition
        :   ∀(a : Type)
          → ∀(b : Type)
          → List (Either { _1 = a, _2 = b })
          → { lefts : List a, rights : List b }
        =   λ(a : Type)
          → λ(b : Type)
          → λ(eithers : List (Either { _1 = a, _2 = b }))
          →     let left =
                        λ(acc : { lefts : List a, rights : List b })
                      → λ(x : a)
                      → { lefts = [ x ] # acc.lefts, rights = acc.rights }
            
            in  let right =
                        λ(acc : { lefts : List a, rights : List b })
                      → λ(y : b)
                      → { lefts = acc.lefts, rights = [ y ] # acc.rights }
            
            in  List/fold
                (Either { _1 = a, _2 = b })
                eithers
                { lefts : List a, rights : List b }
                (   λ(e : Either { _1 = a, _2 = b })
                  → λ(acc : { lefts : List a, rights : List b })
                  → merge { Left = left acc, Right = right acc } e
                )
                { lefts = [] : List a, rights = [] : List b }

in  partition
