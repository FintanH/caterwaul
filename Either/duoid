    let kArrow = ./../Function/Kind

in  let object = Type

in  let cat = ./../Category/Set/monoidal/cartesian

in  let CommutativeSemigroup =
          ./../Semigroup/Commutative/Type object cat.arrow cat.op

in    λ(a : Type)
    → λ(semigroup : CommutativeSemigroup a)
    →   { additive =
            ./applicative/parallel a semigroup
        , multiplicative =
            ./applicative/sequential a
        }
      : ./../Duoid/Type
        (kArrow object object)
        (./../Category/Endofunctor/monoidal/applicative cat)
        (λ(b : Type) → ./Type { _1 = a, _2 = b })
