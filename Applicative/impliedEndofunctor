    let kArrow = ./../Function/Kind

in  let object = Type

in  let cat = ./../Category/Set/monoidal/cartesian

in    λ(f : kArrow object object)
    → λ(applicative : ./Type object cat cat f)
    →   { map =
              λ(a : object)
            → λ(b : object)
            → λ(fn : cat.arrow { _1 = a, _2 = b })
            → λ(fa : f a)
            → applicative.op
              b
              (   λ(r : Type)
                → λ ( day
                    :   ∀(c : { _1 : object, _2 : object })
                      → cat.arrow { _1 = cat.op c, _2 = b }
                      → { _1 : f c._1, _2 : f c._2 }
                      → r
                    )
                → day
                  { _1 = cat.arrow { _1 = a, _2 = b }, _2 = a }
                  (   λ(p : { _1 : cat.arrow { _1 = a, _2 = b }, _2 : a })
                    → p._1 p._2
                  )
                  { _1 =
                      applicative.identity
                      (cat.arrow { _1 = a, _2 = b })
                      (λ(_ : cat.identity) → fn)
                  , _2 =
                      fa
                  }
              )
        }
      : ./../Functor/Endo/Type Type ./../Function/Type f
